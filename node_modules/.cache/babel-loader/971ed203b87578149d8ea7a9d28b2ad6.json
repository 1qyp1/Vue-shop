{"ast":null,"code":"import { windowInit } from './utils/requestAnimationFrame';\nexport default {\n  name: 'LyTabbar',\n  props: {\n    lineWidth: {\n      type: Number,\n      default: 3\n    },\n    activeColor: {\n      type: String,\n      default: 'red'\n    },\n    fixBottom: {\n      type: Boolean,\n      default: false\n    },\n    value: {\n      type: Number,\n      default: 0\n    },\n    // 近似等于超出边界时最大可拖动距离(px);\n    additionalX: {\n      type: Number,\n      default: 50\n    },\n    // 惯性回弹指数(值越大，幅度越大，惯性回弹距离越长);\n    reBoundExponent: {\n      type: Number,\n      default: 10,\n\n      validator(value) {\n        return value > 0;\n      }\n\n    },\n    // 灵敏度(惯性滑动时的灵敏度,值越小，阻力越大),可近似认为速度减为零所需的时间(ms);\n    sensitivity: {\n      type: Number,\n      default: 1000,\n\n      validator(value) {\n        return value > 0;\n      }\n\n    },\n    // 回弹过程duration;\n    reBoundingDuration: {\n      type: Number,\n      default: 360\n    }\n  },\n\n  data() {\n    return {\n      activeBarX: 0,\n      activeBarWidth: 0,\n      speed: 0,\n      // 滑动速度(正常滑动时一般不会超过10);\n      touching: false,\n      // 是否处于touch状态;\n      reBounding: false,\n      // 是否处于回弹过程;\n      translateX: 0,\n      startX: 0,\n      lastX: 0,\n      currentX: 0,\n      startMoveTime: 0,\n      endMoveTime: 0,\n      frameTime: 16.7,\n      // 每个动画帧的ms数\n      frameStartTime: 0,\n      frameEndTime: 0,\n      inertiaFrame: 0,\n      zeroSpeed: 0.001,\n      // 当speed绝对值小于该值时认为速度为0 (可用于控制惯性滚动结束期的顺滑度)\n      acceleration: 0 // 惯性滑动加速度;\n\n    };\n  },\n\n  computed: {\n    style() {\n      if (this.fixBottom) return {};\n      return {\n        transitionTimingFunction: this.transitionTimingFunction,\n        transitionDuration: `${this.transitionDuration}ms`,\n        transform: `translate3d(${this.translateX}px, 0px, 0px)`\n      };\n    },\n\n    activeBarStyle() {\n      return {\n        transition: `all 300ms`,\n        width: `${this.activeBarWidth}px`,\n        height: `${this.lineWidth}px`,\n        transform: `translate3d(${this.activeBarX}px, 0, 0)`,\n        backgroundColor: this.activeColor\n      };\n    },\n\n    transitionDuration() {\n      if (this.touching || !this.reBounding && !this.touching) {\n        return 0;\n      }\n\n      if (this.reBounding && !this.touching) {\n        return this.reBoundingDuration;\n      }\n    },\n\n    transitionTimingFunction() {\n      return this.reBounding ? 'cubic-bezier(0.25, 0.46, 0.45, 0.94)' : 'cubic-bezier(0.1, 0.57, 0.1, 1)';\n    },\n\n    // 可视区宽度;\n    viewAreaWidth() {\n      return this.$refs.viewArea.offsetWidth;\n    },\n\n    // 可视区与可滑动元素宽度差值;\n    listWidth() {\n      return this.$refs.list.offsetWidth - this.viewAreaWidth;\n    },\n\n    // 是否向左惯性滚动;\n    isMoveLeft() {\n      return this.currentX <= this.startX;\n    },\n\n    isMoveRight() {\n      return this.currentX >= this.startX;\n    }\n\n  },\n  watch: {\n    value() {\n      this.checkPosition();\n      this.calcBarPosX();\n    }\n\n  },\n\n  mounted() {\n    this.bindEvent();\n    this.checkPosition();\n    this.calcBarPosX();\n    windowInit();\n  },\n\n  destoryed() {\n    this.removeEvent();\n  },\n\n  methods: {\n    // start\n    handleTouchStart(event) {\n      event.stopPropagation();\n      cancelAnimationFrame(this.inertiaFrame);\n      this.lastX = event.touches[0].clientX;\n    },\n\n    // move\n    handleTouchMove(event) {\n      if (this.listWidth <= 0) return;\n      event.preventDefault();\n      event.stopPropagation();\n      this.touching = true;\n      this.startMoveTime = this.endMoveTime;\n      this.startX = this.lastX;\n      this.currentX = event.touches[0].clientX;\n      this.moveFollowTouch();\n      this.endMoveTime = event.timeStamp; // 每次触发touchmove事件的时间戳;\n    },\n\n    // end\n    handleTouchEnd(event) {\n      this.touching = false;\n\n      if (this.checkReboundX()) {\n        cancelAnimationFrame(this.inertiaFrame);\n      } else {\n        let silenceTime = event.timeStamp - this.endMoveTime;\n        let timeStamp = this.endMoveTime - this.startMoveTime;\n        timeStamp = timeStamp > 0 ? timeStamp : 8;\n        if (silenceTime > 100) return; // 停顿时间超过100ms不产生惯性滑动;\n\n        this.speed = (this.lastX - this.startX) / timeStamp;\n        this.acceleration = this.speed / this.sensitivity;\n        this.frameStartTime = new Date().getTime();\n        this.inertiaFrame = requestAnimationFrame(this.moveByInertia);\n      }\n    },\n\n    // 如果需要回弹则进行回弹操作并返回true;\n    checkReboundX() {\n      this.reBounding = false;\n\n      if (this.translateX > 0) {\n        this.reBounding = true;\n        this.translateX = 0;\n      } else if (this.translateX < -this.listWidth) {\n        this.reBounding = true;\n        this.translateX = -this.listWidth;\n      }\n\n      return this.translateX === 0 || this.translateX === -this.listWidth;\n    },\n\n    bindEvent() {\n      this.$el.addEventListener('touchstart', this.handleTouchStart, false);\n      this.$el.addEventListener('touchmove', this.handleTouchMove, false);\n      this.$el.addEventListener('touchend', this.handleTouchEnd, false);\n    },\n\n    removeEvent() {\n      this.$el.removeEventListener('touchstart', this.handleTouchStart);\n      this.$el.removeEventListener('touchmove', this.handleTouchMove);\n      this.$el.removeEventListener('touchend', this.handleTouchEnd);\n    },\n\n    // touch拖动\n    moveFollowTouch() {\n      if (this.isMoveLeft) {\n        // 向左拖动\n        if (this.translateX <= 0 && this.translateX + this.listWidth > 0 || this.translateX > 0) {\n          this.translateX += this.currentX - this.lastX;\n        } else if (this.translateX + this.listWidth <= 0) {\n          this.translateX += this.additionalX * (this.currentX - this.lastX) / (this.viewAreaWidth + Math.abs(this.translateX + this.listWidth));\n        }\n      } else {\n        // 向右拖动\n        if (this.translateX >= 0) {\n          this.translateX += this.additionalX * (this.currentX - this.lastX) / (this.viewAreaWidth + this.translateX);\n        } else if (this.translateX <= 0 && this.translateX + this.listWidth >= 0 || this.translateX + this.listWidth <= 0) {\n          this.translateX += this.currentX - this.lastX;\n        }\n      }\n\n      this.lastX = this.currentX;\n    },\n\n    // 惯性滑动\n    moveByInertia() {\n      this.frameEndTime = new Date().getTime();\n      this.frameTime = this.frameEndTime - this.frameStartTime;\n\n      if (this.isMoveLeft) {\n        // 向左惯性滑动;\n        if (this.translateX <= -this.listWidth) {\n          // 超出边界的过程;\n          // 加速度指数变化;\n          this.acceleration *= (this.reBoundExponent + Math.abs(this.translateX + this.listWidth)) / this.reBoundExponent;\n          this.speed = Math.min(this.speed - this.acceleration, 0); // 为避免减速过程过短，此处加速度没有乘上frameTime;\n        } else {\n          this.speed = Math.min(this.speed - this.acceleration * this.frameTime, 0);\n        }\n      } else if (this.isMoveRight) {\n        // 向右惯性滑动;\n        if (this.translateX >= 0) {\n          this.acceleration *= (this.reBoundExponent + this.translateX) / this.reBoundExponent;\n          this.speed = Math.max(this.speed - this.acceleration, 0);\n        } else {\n          this.speed = Math.max(this.speed - this.acceleration * this.frameTime, 0);\n        }\n      }\n\n      this.translateX += this.speed * this.frameTime / 2;\n\n      if (Math.abs(this.speed) <= this.zeroSpeed) {\n        this.checkReboundX();\n        return;\n      }\n\n      this.frameStartTime = this.frameEndTime;\n      this.inertiaFrame = requestAnimationFrame(this.moveByInertia);\n    },\n\n    // 计算activeBar的translateX\n    calcBarPosX() {\n      if (this.fixBottom || !this.$children.length) return;\n      if (this.$children.length <= this.value) return;\n      const item = this.$children[this.value].$el;\n      const itemWidth = item.offsetWidth;\n      const itemLeft = item.offsetLeft;\n      this.activeBarWidth = Math.max(itemWidth * 0.6, 14);\n      this.activeBarX = itemLeft + (itemWidth - this.activeBarWidth) / 2;\n    },\n\n    // 点击切换item时，调整位置使当前item尽可能往中间显示\n    checkPosition() {\n      if (this.fixBottom || !this.$children.length) return;\n      if (this.$children.length <= this.value) return;\n      const activeItem = this.$children[this.value].$el;\n      const offsetLeft = activeItem.offsetLeft;\n      const half = (this.viewAreaWidth - activeItem.offsetWidth) / 2;\n      let changeX = 0;\n      const absTransX = Math.abs(this.translateX);\n\n      if (offsetLeft <= absTransX + half) {\n        // item偏左，需要往右移\n        let pageX = offsetLeft + this.translateX;\n        changeX = half - pageX;\n      } else {\n        // item偏右，需要往左移\n        changeX = -(offsetLeft - absTransX - half);\n      }\n\n      let lastX = changeX + this.translateX; // 两种边界情况\n\n      lastX > 0 && (lastX = 0);\n      lastX < -this.listWidth && (lastX = -this.listWidth);\n      this.reBounding = true;\n      this.translateX = lastX;\n    }\n\n  }\n};","map":{"version":3,"mappings":"AAkBA;AAEA;EACAA,gBADA;EAGAC;IACAC;MACAC,YADA;MAEAC;IAFA,CADA;IAKAC;MACAF,YADA;MAEAC;IAFA,CALA;IASAE;MACAH,aADA;MAEAC;IAFA,CATA;IAaAG;MACAJ,YADA;MAEAC;IAFA,CAbA;IAkBA;IACAI;MACAL,YADA;MAEAC;IAFA,CAnBA;IAuBA;IACAK;MACAN,YADA;MAEAC,WAFA;;MAGAM;QACA;MACA;;IALA,CAxBA;IA+BA;IACAC;MACAR,YADA;MAEAC,aAFA;;MAGAM;QACA;MACA;;IALA,CAhCA;IAuCA;IACAE;MACAT,YADA;MAEAC;IAFA;EAxCA,CAHA;;EAiDAS;IACA;MACAC,aADA;MAEAC,iBAFA;MAGAC,QAHA;MAGA;MACAC,eAJA;MAIA;MACAC,iBALA;MAKA;MACAC,aANA;MAOAC,SAPA;MAQAC,QARA;MASAC,WATA;MAUAC,gBAVA;MAWAC,cAXA;MAYAC,eAZA;MAYA;MACAC,iBAbA;MAcAC,eAdA;MAeAC,eAfA;MAgBAC,gBAhBA;MAgBA;MACAC,eAjBA,CAiBA;;IAjBA;EAmBA,CArEA;;EAuEAC;IACAC;MACA;MACA;QACAC,uDADA;QAEAC,kDAFA;QAGAC;MAHA;IAKA,CARA;;IASAC;MACA;QACAC,uBADA;QAEAC,iCAFA;QAGAC,6BAHA;QAIAJ,oDAJA;QAKAK;MALA;IAOA,CAjBA;;IAkBAN;MACA;QACA;MACA;;MACA;QACA;MACA;IACA,CAzBA;;IA0BAD;MACA;IACA,CA5BA;;IA6BA;IACAQ;MACA;IACA,CAhCA;;IAiCA;IACAC;MACA;IACA,CApCA;;IAqCA;IACAC;MACA;IACA,CAxCA;;IAyCAC;MACA;IACA;;EA3CA,CAvEA;EAqHAC;IACAtC;MACA;MACA;IACA;;EAJA,CArHA;;EA4HAuC;IACA;IACA;IACA;IACAC;EACA,CAjIA;;EAmIAC;IACA;EACA,CArIA;;EAuIAC;IACA;IACAC;MACAC;MACAC;MACA;IACA,CANA;;IAQA;IACAC;MACA;MACAF;MACAA;MACA;MACA;MACA;MACA;MACA;MACA,mCATA,CASA;IACA,CAnBA;;IAqBA;IACAG;MACA;;MACA;QACAF;MACA,CAFA,MAEA;QACA;QACA;QACAG;QACA,8BAJA,CAIA;;QACA;QACA;QACA;QACA;MACA;IACA,CApCA;;IAsCA;IACAC;MACA;;MACA;QACA;QACA;MACA,CAHA,MAGA;QACA;QACA;MACA;;MACA;IACA,CAjDA;;IAmDAC;MACA;MACA;MACA;IACA,CAvDA;;IAyDAC;MACA;MACA;MACA;IACA,CA7DA;;IA+DA;IACAC;MACA;QAAA;QACA;UACA;QACA,CAFA,MAEA;UACA,sEACA,+DADA;QAEA;MACA,CAPA,MAOA;QAAA;QACA;UACA,sEACA,oCADA;QAEA,CAHA,MAGA,qEACA,qCADA,EACA;UACA;QACA;MACA;;MACA;IACA,CAlFA;;IAoFA;IACAC;MACA;MACA;;MACA;QAAA;QACA;UAAA;UACA;UACA,6CACAC,0CADA,IAEA,oBAFA;UAGA,yDALA,CAKA;QACA,CANA,MAMA;UACA;QACA;MACA,CAVA,MAUA;QAAA;QACA;UACA;UACA;QACA,CAHA,MAGA;UACA;QACA;MACA;;MACA;;MACA;QACA;QACA;MACA;;MACA;MACA;IACA,CAjHA;;IAmHA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACA,CA5HA;;IA8HA;IACAC;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;MACA;QAAA;QACA;QACAC;MACA,CAHA,MAGA;QAAA;QACAA;MACA;;MACA,sCAdA,CAeA;;MACA3C;MACAA;MACA;MACA;IACA;;EAnJA;AAvIA","names":["name","props","lineWidth","type","default","activeColor","fixBottom","value","additionalX","reBoundExponent","validator","sensitivity","reBoundingDuration","data","activeBarX","activeBarWidth","speed","touching","reBounding","translateX","startX","lastX","currentX","startMoveTime","endMoveTime","frameTime","frameStartTime","frameEndTime","inertiaFrame","zeroSpeed","acceleration","computed","style","transitionTimingFunction","transitionDuration","transform","activeBarStyle","transition","width","height","backgroundColor","viewAreaWidth","listWidth","isMoveLeft","isMoveRight","watch","mounted","windowInit","destoryed","methods","handleTouchStart","event","cancelAnimationFrame","handleTouchMove","handleTouchEnd","timeStamp","checkReboundX","bindEvent","removeEvent","moveFollowTouch","moveByInertia","Math","calcBarPosX","checkPosition","changeX"],"sourceRoot":"node_modules/ly-tab/src","sources":["tabbar.vue"],"sourcesContent":["<template>\r\n  <div class=\"ly-tabbar\"\r\n    :class=\"{'ly-tabbar-fix-bottom': fixBottom}\"\r\n    ref=\"viewArea\">\r\n    <div class=\"ly-tab-list\"\r\n         :style=\"style\"\r\n         ref=\"list\">\r\n      <slot></slot>\r\n      <div class=\"ly-tab-active-bar\"\r\n          v-if=\"!fixBottom\"\r\n          :style=\"activeBarStyle\"\r\n          ref=\"activeBar\">\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport { windowInit } from './utils/requestAnimationFrame'\r\n\r\nexport default {\r\n  name: 'LyTabbar',\r\n\r\n  props: {\r\n    lineWidth: {\r\n      type: Number,\r\n      default: 3\r\n    },\r\n    activeColor: {\r\n      type: String,\r\n      default: 'red'\r\n    },\r\n    fixBottom: {\r\n      type: Boolean,\r\n      default: false\r\n    },\r\n    value: {\r\n      type: Number,\r\n      default: 0\r\n    },\r\n\r\n    // 近似等于超出边界时最大可拖动距离(px);\r\n    additionalX: {\r\n      type: Number,\r\n      default: 50\r\n    },\r\n    // 惯性回弹指数(值越大，幅度越大，惯性回弹距离越长);\r\n    reBoundExponent: {\r\n      type: Number,\r\n      default: 10,\r\n      validator (value) {\r\n        return value > 0\r\n      }\r\n    },\r\n    // 灵敏度(惯性滑动时的灵敏度,值越小，阻力越大),可近似认为速度减为零所需的时间(ms);\r\n    sensitivity: {\r\n      type: Number,\r\n      default: 1000,\r\n      validator (value) {\r\n        return value > 0\r\n      }\r\n    },\r\n    // 回弹过程duration;\r\n    reBoundingDuration: {\r\n      type: Number,\r\n      default: 360\r\n    }\r\n  },\r\n\r\n  data () {\r\n    return {\r\n      activeBarX: 0,\r\n      activeBarWidth: 0,\r\n      speed: 0, // 滑动速度(正常滑动时一般不会超过10);\r\n      touching: false, // 是否处于touch状态;\r\n      reBounding: false, // 是否处于回弹过程;\r\n      translateX: 0,\r\n      startX: 0,\r\n      lastX: 0,\r\n      currentX: 0,\r\n      startMoveTime: 0,\r\n      endMoveTime: 0,\r\n      frameTime: 16.7, // 每个动画帧的ms数\r\n      frameStartTime: 0,\r\n      frameEndTime: 0,\r\n      inertiaFrame: 0,\r\n      zeroSpeed: 0.001, // 当speed绝对值小于该值时认为速度为0 (可用于控制惯性滚动结束期的顺滑度)\r\n      acceleration: 0, // 惯性滑动加速度;\r\n    }\r\n  },\r\n\r\n  computed: {\r\n    style () {\r\n      if (this.fixBottom) return {}\r\n      return {\r\n        transitionTimingFunction: this.transitionTimingFunction,\r\n        transitionDuration: `${this.transitionDuration}ms`,\r\n        transform: `translate3d(${this.translateX}px, 0px, 0px)`\r\n      }\r\n    },\r\n    activeBarStyle () {\r\n      return {\r\n        transition: `all 300ms`,\r\n        width: `${this.activeBarWidth}px`,\r\n        height: `${this.lineWidth}px`,\r\n        transform: `translate3d(${this.activeBarX}px, 0, 0)`,\r\n        backgroundColor: this.activeColor\r\n      }\r\n    },\r\n    transitionDuration () {\r\n      if (this.touching || (!this.reBounding && !this.touching)) {\r\n        return 0\r\n      }\r\n      if (this.reBounding && !this.touching) {\r\n        return this.reBoundingDuration\r\n      }\r\n    },\r\n    transitionTimingFunction () {\r\n      return this.reBounding ? 'cubic-bezier(0.25, 0.46, 0.45, 0.94)' : 'cubic-bezier(0.1, 0.57, 0.1, 1)'\r\n    },\r\n    // 可视区宽度;\r\n    viewAreaWidth () {\r\n      return this.$refs.viewArea.offsetWidth\r\n    },\r\n    // 可视区与可滑动元素宽度差值;\r\n    listWidth () {\r\n      return this.$refs.list.offsetWidth - this.viewAreaWidth\r\n    },\r\n    // 是否向左惯性滚动;\r\n    isMoveLeft () {\r\n      return this.currentX <= this.startX\r\n    },\r\n    isMoveRight () {\r\n      return this.currentX >= this.startX\r\n    }\r\n  },\r\n\r\n  watch: {\r\n    value () {\r\n      this.checkPosition()\r\n      this.calcBarPosX()\r\n    }\r\n  },\r\n\r\n  mounted () {\r\n    this.bindEvent()\r\n    this.checkPosition()\r\n    this.calcBarPosX()\r\n    windowInit()\r\n  },\r\n\r\n  destoryed () {\r\n    this.removeEvent()\r\n  },\r\n\r\n  methods: {\r\n    // start\r\n    handleTouchStart (event) {\r\n      event.stopPropagation()\r\n      cancelAnimationFrame(this.inertiaFrame)\r\n      this.lastX = event.touches[0].clientX\r\n    },\r\n\r\n    // move\r\n    handleTouchMove (event) {\r\n      if (this.listWidth <= 0) return\r\n      event.preventDefault()\r\n      event.stopPropagation()\r\n      this.touching = true\r\n      this.startMoveTime = this.endMoveTime\r\n      this.startX = this.lastX\r\n      this.currentX = event.touches[0].clientX\r\n      this.moveFollowTouch()\r\n      this.endMoveTime = event.timeStamp // 每次触发touchmove事件的时间戳;\r\n    },\r\n\r\n    // end\r\n    handleTouchEnd (event) {\r\n      this.touching = false\r\n      if (this.checkReboundX()) {\r\n        cancelAnimationFrame(this.inertiaFrame)\r\n      } else {\r\n        let silenceTime = event.timeStamp - this.endMoveTime\r\n        let timeStamp = this.endMoveTime - this.startMoveTime\r\n        timeStamp = timeStamp > 0 ? timeStamp : 8\r\n        if (silenceTime > 100) return  // 停顿时间超过100ms不产生惯性滑动;\r\n        this.speed = (this.lastX - this.startX) / timeStamp\r\n        this.acceleration = this.speed / this.sensitivity\r\n        this.frameStartTime = new Date().getTime()\r\n        this.inertiaFrame = requestAnimationFrame(this.moveByInertia)\r\n      }\r\n    },\r\n\r\n    // 如果需要回弹则进行回弹操作并返回true;\r\n    checkReboundX () {\r\n      this.reBounding = false\r\n      if (this.translateX > 0) {\r\n        this.reBounding = true\r\n        this.translateX = 0\r\n      } else if (this.translateX < -this.listWidth) {\r\n        this.reBounding = true\r\n        this.translateX = -this.listWidth\r\n      }\r\n      return this.translateX === 0 || this.translateX === -this.listWidth\r\n    },\r\n\r\n    bindEvent () {\r\n      this.$el.addEventListener('touchstart', this.handleTouchStart, false)\r\n      this.$el.addEventListener('touchmove', this.handleTouchMove, false)\r\n      this.$el.addEventListener('touchend', this.handleTouchEnd, false)\r\n    },\r\n\r\n    removeEvent () {\r\n      this.$el.removeEventListener('touchstart', this.handleTouchStart)\r\n      this.$el.removeEventListener('touchmove', this.handleTouchMove)\r\n      this.$el.removeEventListener('touchend', this.handleTouchEnd)\r\n    },\r\n\r\n    // touch拖动\r\n    moveFollowTouch () {\r\n      if (this.isMoveLeft) { // 向左拖动\r\n        if (this.translateX <= 0 && this.translateX + this.listWidth > 0 || this.translateX > 0) {\r\n          this.translateX += this.currentX - this.lastX\r\n        } else if (this.translateX + this.listWidth <= 0) {\r\n          this.translateX += this.additionalX * (this.currentX - this.lastX)\r\n                             / (this.viewAreaWidth + Math.abs(this.translateX + this.listWidth))\r\n        }\r\n      } else { // 向右拖动\r\n        if (this.translateX >= 0) {\r\n          this.translateX += this.additionalX * (this.currentX - this.lastX)\r\n                             / (this.viewAreaWidth + this.translateX)\r\n        } else if ((this.translateX <= 0 && this.translateX + this.listWidth >= 0) ||\r\n          this.translateX + this.listWidth <= 0) {\r\n            this.translateX += this.currentX - this.lastX\r\n        }\r\n      }\r\n      this.lastX = this.currentX\r\n    },\r\n\r\n    // 惯性滑动\r\n    moveByInertia () {\r\n      this.frameEndTime = new Date().getTime()\r\n      this.frameTime = this.frameEndTime - this.frameStartTime\r\n      if (this.isMoveLeft) { // 向左惯性滑动;\r\n        if (this.translateX <= -this.listWidth) { // 超出边界的过程;\r\n          // 加速度指数变化;\r\n          this.acceleration *= (this.reBoundExponent +\r\n                               Math.abs(this.translateX + this.listWidth)) /\r\n                               this.reBoundExponent\r\n          this.speed = Math.min(this.speed - this.acceleration, 0) // 为避免减速过程过短，此处加速度没有乘上frameTime;\r\n        } else {\r\n          this.speed = Math.min(this.speed - this.acceleration * this.frameTime, 0)\r\n        }\r\n      } else if (this.isMoveRight) { // 向右惯性滑动;\r\n        if (this.translateX >= 0) {\r\n          this.acceleration *= (this.reBoundExponent + this.translateX) / this.reBoundExponent\r\n          this.speed = Math.max(this.speed - this.acceleration, 0)\r\n        } else {\r\n          this.speed = Math.max(this.speed - this.acceleration * this.frameTime, 0)\r\n        }\r\n      }\r\n      this.translateX += this.speed * this.frameTime / 2\r\n      if (Math.abs(this.speed) <= this.zeroSpeed) {\r\n        this.checkReboundX()\r\n        return\r\n      }\r\n      this.frameStartTime = this.frameEndTime\r\n      this.inertiaFrame = requestAnimationFrame(this.moveByInertia)\r\n    },\r\n\r\n    // 计算activeBar的translateX\r\n    calcBarPosX () {\r\n      if (this.fixBottom || !this.$children.length) return\r\n      if (this.$children.length <= this.value) return\r\n      const item = this.$children[this.value].$el\r\n      const itemWidth = item.offsetWidth\r\n      const itemLeft = item.offsetLeft\r\n      this.activeBarWidth = Math.max(itemWidth * 0.6, 14)\r\n      this.activeBarX = itemLeft + (itemWidth - this.activeBarWidth) / 2\r\n    },\r\n\r\n    // 点击切换item时，调整位置使当前item尽可能往中间显示\r\n    checkPosition () {\r\n      if (this.fixBottom || !this.$children.length) return\r\n      if (this.$children.length <= this.value) return\r\n      const activeItem = this.$children[this.value].$el\r\n      const offsetLeft = activeItem.offsetLeft\r\n      const half = (this.viewAreaWidth - activeItem.offsetWidth) / 2\r\n      let changeX = 0\r\n      const absTransX = Math.abs(this.translateX)\r\n      if (offsetLeft <= absTransX + half) { // item偏左，需要往右移\r\n        let pageX = offsetLeft + this.translateX\r\n        changeX = half - pageX\r\n      } else { // item偏右，需要往左移\r\n        changeX = -(offsetLeft - absTransX - half)\r\n      }\r\n      let lastX = changeX + this.translateX\r\n      // 两种边界情况\r\n      lastX > 0 && (lastX = 0)\r\n      lastX < -this.listWidth && (lastX = -this.listWidth)\r\n      this.reBounding = true\r\n      this.translateX = lastX\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n.ly-tabbar {\r\n  position: relative;\r\n  background-color: rgba(255 ,255, 255, .8);\r\n  width: 100%;\r\n  overflow: hidden;\r\n  display: flex;\r\n  border-bottom: 1px solid #eee;\r\n  box-shadow: 0 0px 6px 1px #eee\r\n}\r\n\r\n.ly-tabbar.ly-tabbar-fix-bottom {\r\n  position: fixed;\r\n  bottom: 0;\r\n  left: 0;\r\n  right: 0;\r\n  border-top: 1px solid #ccc;\r\n  border-bottom: none;\r\n}\r\n\r\n.ly-tabbar.ly-tabbar-fix-bottom .ly-tab-item {\r\n  border-bottom: none!important;\r\n}\r\n\r\n.ly-tab-list {\r\n  position: relative;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-flow: row nowrap;\r\n  flex-shrink: 0;\r\n  padding: 14px 10px;\r\n  min-width: 100%;\r\n}\r\n\r\n.ly-tab-active-bar {\r\n  position: absolute;\r\n  bottom: 3px;\r\n  left: 0;\r\n  width: 30px;\r\n  height: 3px;\r\n  border-radius: 4px;\r\n}\r\n\r\n.ly-tab-item {\r\n  flex-grow: 1;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  padding: 0 5px;\r\n}\r\n\r\n.ly-tab-item:not(:first-child) {\r\n  margin-left: 15px;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}